{"ast":null,"code":"import{useState,useEffect}from'react';// Hook for real-time connection status\nexport const useRealTimeData=()=>{const[isConnected,setIsConnected]=useState(true);const[lastUpdate,setLastUpdate]=useState(new Date());const[dataPoints,setDataPoints]=useState(1247);useEffect(()=>{// Simulate connection status changes\nconst interval=setInterval(()=>{setLastUpdate(new Date());setDataPoints(prev=>prev+Math.floor(Math.random()*3));// Simulate occasional disconnections\nif(Math.random()<0.02){setIsConnected(false);setTimeout(()=>setIsConnected(true),2000);}},3000);return()=>clearInterval(interval);},[]);return{isConnected,lastUpdate,dataPoints};};// Hook for vital signs data\nexport const useVitalSigns=()=>{const[vitals,setVitals]=useState({heartRate:72,spO2:98,temperature:36.8,bloodPressure:'120/80'});useEffect(()=>{const interval=setInterval(()=>{setVitals(prev=>({heartRate:Math.floor(Math.random()*20)+65,spO2:Math.floor(Math.random()*5)+95,temperature:(Math.random()*0.6+36.5).toFixed(1),bloodPressure:\"\".concat(Math.floor(Math.random()*20)+110,\"/\").concat(Math.floor(Math.random()*15)+75)}));},3000);return()=>clearInterval(interval);},[]);return{vitals};};// Hook for AI processing status\nexport const useAIProcessing=()=>{const[isProcessing,setIsProcessing]=useState(false);const[confidence,setConfidence]=useState(78);const[predictions,setPredictions]=useState([]);useEffect(()=>{const interval=setInterval(()=>{// Simulate AI processing cycles\nif(Math.random()<0.3){setIsProcessing(true);setTimeout(()=>{setIsProcessing(false);setConfidence(Math.floor(Math.random()*20)+70);},2000);}},5000);return()=>clearInterval(interval);},[]);return{isProcessing,confidence,predictions};};","map":{"version":3,"names":["useState","useEffect","useRealTimeData","isConnected","setIsConnected","lastUpdate","setLastUpdate","Date","dataPoints","setDataPoints","interval","setInterval","prev","Math","floor","random","setTimeout","clearInterval","useVitalSigns","vitals","setVitals","heartRate","spO2","temperature","bloodPressure","toFixed","concat","useAIProcessing","isProcessing","setIsProcessing","confidence","setConfidence","predictions","setPredictions"],"sources":["C:/Users/EGOIST/Documents/COOKING/IDEATHON-PS10/src/hooks/useRealTimeData.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n// Hook for real-time connection status\r\nexport const useRealTimeData = () => {\r\n  const [isConnected, setIsConnected] = useState(true);\r\n  const [lastUpdate, setLastUpdate] = useState(new Date());\r\n  const [dataPoints, setDataPoints] = useState(1247);\r\n\r\n  useEffect(() => {\r\n    // Simulate connection status changes\r\n    const interval = setInterval(() => {\r\n      setLastUpdate(new Date());\r\n      setDataPoints(prev => prev + Math.floor(Math.random() * 3));\r\n      \r\n      // Simulate occasional disconnections\r\n      if (Math.random() < 0.02) {\r\n        setIsConnected(false);\r\n        setTimeout(() => setIsConnected(true), 2000);\r\n      }\r\n    }, 3000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return { isConnected, lastUpdate, dataPoints };\r\n};\r\n\r\n// Hook for vital signs data\r\nexport const useVitalSigns = () => {\r\n  const [vitals, setVitals] = useState({\r\n    heartRate: 72,\r\n    spO2: 98,\r\n    temperature: 36.8,\r\n    bloodPressure: '120/80'\r\n  });\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setVitals(prev => ({\r\n        heartRate: Math.floor(Math.random() * 20) + 65,\r\n        spO2: Math.floor(Math.random() * 5) + 95,\r\n        temperature: (Math.random() * 0.6 + 36.5).toFixed(1),\r\n        bloodPressure: `${Math.floor(Math.random() * 20) + 110}/${Math.floor(Math.random() * 15) + 75}`\r\n      }));\r\n    }, 3000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return { vitals };\r\n};\r\n\r\n// Hook for AI processing status\r\nexport const useAIProcessing = () => {\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [confidence, setConfidence] = useState(78);\r\n  const [predictions, setPredictions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      // Simulate AI processing cycles\r\n      if (Math.random() < 0.3) {\r\n        setIsProcessing(true);\r\n        setTimeout(() => {\r\n          setIsProcessing(false);\r\n          setConfidence(Math.floor(Math.random() * 20) + 70);\r\n        }, 2000);\r\n      }\r\n    }, 5000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return { isProcessing, confidence, predictions };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}