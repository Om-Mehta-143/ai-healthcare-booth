{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n// Hook for real-time connection status\nexport const useRealTimeData = () => {\n  _s();\n  const [isConnected, setIsConnected] = useState(true);\n  const [lastUpdate, setLastUpdate] = useState(new Date());\n  const [dataPoints, setDataPoints] = useState(1247);\n  useEffect(() => {\n    // Simulate connection status changes\n    const interval = setInterval(() => {\n      setLastUpdate(new Date());\n      setDataPoints(prev => prev + Math.floor(Math.random() * 3));\n\n      // Simulate occasional disconnections\n      if (Math.random() < 0.02) {\n        setIsConnected(false);\n        setTimeout(() => setIsConnected(true), 2000);\n      }\n    }, 3000);\n    return () => clearInterval(interval);\n  }, []);\n  return {\n    isConnected,\n    lastUpdate,\n    dataPoints\n  };\n};\n\n// Hook for vital signs data\n_s(useRealTimeData, \"gI+TnV/ERYe6e1a6QLjUgXP9+eI=\");\nexport const useVitalSigns = () => {\n  _s2();\n  const [vitals, setVitals] = useState({\n    heartRate: 72,\n    spO2: 98,\n    temperature: 36.8,\n    bloodPressure: '120/80'\n  });\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setVitals(prev => ({\n        heartRate: Math.floor(Math.random() * 20) + 65,\n        spO2: Math.floor(Math.random() * 5) + 95,\n        temperature: (Math.random() * 0.6 + 36.5).toFixed(1),\n        bloodPressure: `${Math.floor(Math.random() * 20) + 110}/${Math.floor(Math.random() * 15) + 75}`\n      }));\n    }, 3000);\n    return () => clearInterval(interval);\n  }, []);\n  return {\n    vitals\n  };\n};\n\n// Hook for AI processing status\n_s2(useVitalSigns, \"f8eXLqunwYH5tUwa4+oym4GOZsk=\");\nexport const useAIProcessing = () => {\n  _s3();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [confidence, setConfidence] = useState(78);\n  const [predictions, setPredictions] = useState([]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Simulate AI processing cycles\n      if (Math.random() < 0.3) {\n        setIsProcessing(true);\n        setTimeout(() => {\n          setIsProcessing(false);\n          setConfidence(Math.floor(Math.random() * 20) + 70);\n        }, 2000);\n      }\n    }, 5000);\n    return () => clearInterval(interval);\n  }, []);\n  return {\n    isProcessing,\n    confidence,\n    predictions\n  };\n};\n_s3(useAIProcessing, \"lKsu7ALfJZTLAaJzB099qtvD0Nw=\");","map":{"version":3,"names":["useState","useEffect","useRealTimeData","_s","isConnected","setIsConnected","lastUpdate","setLastUpdate","Date","dataPoints","setDataPoints","interval","setInterval","prev","Math","floor","random","setTimeout","clearInterval","useVitalSigns","_s2","vitals","setVitals","heartRate","spO2","temperature","bloodPressure","toFixed","useAIProcessing","_s3","isProcessing","setIsProcessing","confidence","setConfidence","predictions","setPredictions"],"sources":["C:/Users/EGOIST/Documents/COOKING/IDEATHON-PS10/src/hooks/useRealTimeData.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n// Hook for real-time connection status\r\nexport const useRealTimeData = () => {\r\n  const [isConnected, setIsConnected] = useState(true);\r\n  const [lastUpdate, setLastUpdate] = useState(new Date());\r\n  const [dataPoints, setDataPoints] = useState(1247);\r\n\r\n  useEffect(() => {\r\n    // Simulate connection status changes\r\n    const interval = setInterval(() => {\r\n      setLastUpdate(new Date());\r\n      setDataPoints(prev => prev + Math.floor(Math.random() * 3));\r\n      \r\n      // Simulate occasional disconnections\r\n      if (Math.random() < 0.02) {\r\n        setIsConnected(false);\r\n        setTimeout(() => setIsConnected(true), 2000);\r\n      }\r\n    }, 3000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return { isConnected, lastUpdate, dataPoints };\r\n};\r\n\r\n// Hook for vital signs data\r\nexport const useVitalSigns = () => {\r\n  const [vitals, setVitals] = useState({\r\n    heartRate: 72,\r\n    spO2: 98,\r\n    temperature: 36.8,\r\n    bloodPressure: '120/80'\r\n  });\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setVitals(prev => ({\r\n        heartRate: Math.floor(Math.random() * 20) + 65,\r\n        spO2: Math.floor(Math.random() * 5) + 95,\r\n        temperature: (Math.random() * 0.6 + 36.5).toFixed(1),\r\n        bloodPressure: `${Math.floor(Math.random() * 20) + 110}/${Math.floor(Math.random() * 15) + 75}`\r\n      }));\r\n    }, 3000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return { vitals };\r\n};\r\n\r\n// Hook for AI processing status\r\nexport const useAIProcessing = () => {\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [confidence, setConfidence] = useState(78);\r\n  const [predictions, setPredictions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      // Simulate AI processing cycles\r\n      if (Math.random() < 0.3) {\r\n        setIsProcessing(true);\r\n        setTimeout(() => {\r\n          setIsProcessing(false);\r\n          setConfidence(Math.floor(Math.random() * 20) + 70);\r\n        }, 2000);\r\n      }\r\n    }, 5000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return { isProcessing, confidence, predictions };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}